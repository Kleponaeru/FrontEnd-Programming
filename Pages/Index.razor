@page "/"
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json

<style>
    /* Style for the form container */
    .form-container {
        width: 300px;
        /* Set the width to your desired size */
        margin: 0 auto;
        /* Center the form horizontally */
        padding: 20px;
        background-color: #f4f4f4;
        /* Background color for the form */
        border-radius: 10px;
        /* Rounded corners for the form */
        text-align: center;
        /* Center align text within the form */
    }

    /* Style for labels */
    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #333;
        /* Text color for labels */
    }

    /* Style for text and password inputs */
    .form-control {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        /* Border color for inputs */
        border-radius: 5px;
        /* Rounded corners for inputs */
        font-size: 16px;
        /* Font size for inputs */
    }

    /* Style for the submit buttons */
    .btn-container {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
        /* Add some margin for spacing */
    }

    /* Style for the buttons */
    .btn {
        color: #fff;
        /* Text color for the button */
        padding: 15px 0;
        /* Adjust the padding to make both buttons the same height */
        width: 48%;
        /* Set a fixed width for both buttons */
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
    }

    /* Style for the primary button */
    .btn-primary {
        background-color: #198754;
        /* Primary button background color */
    }

    /* Style for the secondary button */
    .btn-secondary {
        background-color: #ffc107;
        /* Secondary button background color */
    }

    .btn-primary:hover {
        background-color: #229760;
        /* Primary button background color */
    }

    /* Style for the secondary button */
    .btn-secondary:hover {
        background-color: #ffcc34;
        /* Secondary button background color */
    }

    /* Style for the horizontal line */
    .divider {
        border-top: 1px solid #ccc;
        /* Border color for the horizontal line */
        margin: 10px 0;
    }
</style>
<PageTitle>Login</PageTitle>
<div class="card" style="width: 340px; max-width: 100%; margin: 0 auto; display: flex; 
    flex-direction: column; justify-content: center;">
    <div class="card-header" style="text-align: center; background-color: #03C03C">
        <h3 class="card-title">LOGIN</h3>
    </div>
    <div class="card-body">
        <div class="form-container">
            <EditForm Model="@login" OnValidSubmit="@addUser">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="username">Username</label>
                    <InputText id="username" name="username" class="form-control" @bind-Value="login.Username" />
                    <ValidationMessage For="() => login.Username" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" name="password" class="form-control" type="password"
                        @bind-Value="login.Password" />
                    <ValidationMessage For="() => login.Password" />
                </div>

                <button type="submit" class="btn btn-primary">LOGIN</button>
                <div class="divider">OR</div>
                <button type="button" class="btn btn-secondary" style="color: black;"
                    @onclick="register">REGISTER</button>
            </EditForm>
        </div>
    </div>
</div>

@code {

    private LoginModel login = new();

    private void register()
    {
        Navigation.NavigateTo("/register");
    }
    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        public string? Password { get; set; }
    }
    public async Task addUser()
    {
        await Http.PostAsJsonAsync("http://localhost:1010/api/fe/regis", login);
    }
}
